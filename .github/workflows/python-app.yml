name: Build

on:
  push:
    branches: [ master, j3dultra-actions ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: Version

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [ x64 ]

    steps:
      - name: Clone PyJ3DUltra
        run: |
          git config --global url.https://github.com/.insteadOf git@github.com:
          git clone --recursive https://github.com/LagoLunatic/PyJ3DUltra.git
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Install zlib
        shell: cmd
        run: |
          cd PyJ3DUltra
          curl -L https://www.zlib.net/zlib1213.zip -o zlib.zip
          7z x zlib.zip
          mv zlib-1.2.13 zlib
          cd zlib
          cmake .
          msbuild zlib.sln /t:Build /property:Configuration=Release
          move Release lib
      - name: Install libpng
        shell: cmd
        run: |
          cd PyJ3DUltra
          curl -L http://prdownloads.sourceforge.net/libpng/lpng1640.zip?download -o libpng.zip
          7z x libpng.zip
          mv lpng1640 libpng
          cd libpng
          cmake . -DZLIB_INCLUDE_DIR=../zlib -DZLIB_LIBRARY=../zlib/lib/zlib
          msbuild libpng.sln /t:Build /property:Configuration=Release
          move Release lib
          cd ../
          set PNG_ROOT=%cd%/libpng
      - name: Build PyJ3DUltra
        shell: cmd
        run: |
          echo %cd%
          cd PyJ3DUltra
          set ZLIB_ROOT=%cd%/zlib
          set ZLIB_INCLUDE_DIR=%cd%/zlib
          set ZLIB_LIBRARY=%cd%/zlib/lib/zlib
          cd J3DUltra
          cmake .
          msbuild J3DUltra.sln /t:Build /property:Configuration=Release
          cd ../
          cmake .
          msbuild J3DUltraPy.sln /t:Build /property:Configuration=Release
          cd Release
          ren J3DUltraPy.* J3DUltra.*
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.architecture }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          pip install PyInstaller
      - name: Set variables
        id: vars
        run: |
          USER_INPUT_VERSION=${{ github.event.inputs.version }}
          TXT_VERSION=$(cat version.txt)
          GIT_SHA_SHORT=$(git rev-parse --short=7 ${{ github.sha }})
          echo "full_version=${USER_INPUT_VERSION:-$TXT_VERSION-$GIT_SHA_SHORT}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Set version
        id: version
        run: |
          echo ${{ steps.vars.outputs.full_version }} > version.txt
      - name: Build Windows App
        run: python -m PyInstaller --log-level=WARN gcft.spec
      - name: Bundle Windows App
        run: python build.py
      - name: Upload Windows App
        uses: actions/upload-artifact@v3
        with:
          name: gcft-${{ steps.vars.outputs.full_version }}-windows-${{ matrix.architecture }}
          path: dist/release_archive_${{ steps.vars.outputs.full_version }}_${{ matrix.architecture }}/*

  linux:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        architecture: [ x64 ]

    steps:
      - name: Clone PyJ3DUltra
        run: |
          git config --global url.https://github.com/.insteadOf git@github.com:
          git clone --recursive https://github.com/Astral-C/PyJ3DUltra.git
      - name: Build PyJ3DUltra
        run: |
          cd PyJ3DUltra
          cmake -DCMAKE_CXX_STANDARD=17 .
          make
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.architecture }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          pip install PyInstaller
      - name: Install any missing Qt dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qtbase5-dev
      - name: Set variables
        id: vars
        run: |
          USER_INPUT_VERSION=${{ github.event.inputs.version }}
          TXT_VERSION=$(cat version.txt)
          GIT_SHA_SHORT=$(git rev-parse --short=7 ${{ github.sha }})
          echo "full_version=${USER_INPUT_VERSION:-$TXT_VERSION-$GIT_SHA_SHORT}" >> $GITHUB_OUTPUT
      - name: Set version
        id: version
        run: |
          echo ${{ steps.vars.outputs.full_version }} > version.txt
      - name: Build Linux App
        run: python -m PyInstaller --log-level=WARN gcft.spec
      - name: Bundle Linux App
        run: python build.py
      - name: Upload Linux App
        uses: actions/upload-artifact@v3
        with:
          name: gcft-${{ steps.vars.outputs.full_version }}-linux-${{ matrix.architecture }}
          path: dist/release_archive_${{ steps.vars.outputs.full_version }}_${{ matrix.architecture }}/*
