name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: Version

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [ x64 ]
    
    defaults:
      run:
        shell: bash
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.architecture }}
          cache: 'pip' # Cache all pip dependencies
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: run-vcpkg
        uses: lukka/run-vcpkg@v11.1
        with:
          vcpkgGitCommitId: 'ad46340bfce415333d6a2139592c22a499fb0df0'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgJsonGlob: '**/PyJ3DUltra/vcpkg.json'
      - name: Cache PyJ3DUltra build
        uses: actions/cache@v3
        with:
          path: PyJ3DUltra/build
          key: ${{ runner.os }}-${{ matrix.architecture }}
      - name: Build PyJ3DUltra
        run: |
          vcpkg integrate install
          cmake PyJ3DUltra -BPyJ3DUltra/build -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          msbuild PyJ3DUltra/build/J3DUltraPy.sln /t:Build /property:Configuration=Release
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install PyInstaller
      - name: Set variables
        id: vars
        run: |
          USER_INPUT_VERSION=${{ github.event.inputs.version }}
          TXT_VERSION=$(cat version.txt)
          GIT_SHA_SHORT=$(git rev-parse --short=7 ${{ github.sha }})
          echo "full_version=${USER_INPUT_VERSION:-$TXT_VERSION-$GIT_SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "lowercase_os=${${{ runner.os }},,}" >> $GITHUB_OUTPUT
      - name: Set version
        id: version
        run: |
          echo ${{ steps.vars.outputs.full_version }} > version.txt
      - name: Build Python App
        run: python -m PyInstaller --log-level=WARN gcft.spec
      - name: Bundle Python App
        run: python build.py
      - name: Upload Python App
        uses: actions/upload-artifact@v3
        with:
          name: gcft-${{ steps.vars.outputs.full_version }}-${{ steps.vars.outputs.lowercase_os }}-${{ matrix.architecture }}
          path: dist/release_archive_${{ steps.vars.outputs.full_version }}_${{ matrix.architecture }}/*
  
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        architecture: [ x64 ]
    
    defaults:
      run:
        shell: bash
    
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      MACOSX_DEPLOYMENT_TARGET: 10.15
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.architecture }}
          cache: 'pip' # Cache all pip dependencies
      - name: Cache PyJ3DUltra build
        uses: actions/cache@v3
        with:
          path: PyJ3DUltra/build
          key: ${{ runner.os }}-${{ matrix.architecture }}
      - name: Build PyJ3DUltra
        run: |
          cmake PyJ3DUltra -BPyJ3DUltra/build
          make -C PyJ3DUltra/build
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install PyInstaller
      - name: Set variables
        id: vars
        run: |
          USER_INPUT_VERSION=${{ github.event.inputs.version }}
          TXT_VERSION=$(cat version.txt)
          GIT_SHA_SHORT=$(git rev-parse --short=7 ${{ github.sha }})
          echo "full_version=${USER_INPUT_VERSION:-$TXT_VERSION-$GIT_SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "lowercase_os=${${{ runner.os }},,}" >> $GITHUB_OUTPUT
      - name: Set version
        id: version
        run: |
          echo ${{ steps.vars.outputs.full_version }} > version.txt
      - name: Build Python App
        run: python -m PyInstaller --log-level=WARN gcft.spec
      - name: Bundle Python App
        run: python build.py
      - name: Upload Python App
        uses: actions/upload-artifact@v3
        with:
          name: gcft-${{ steps.vars.outputs.full_version }}-${{ steps.vars.outputs.lowercase_os }}-${{ matrix.architecture }}
          path: dist/release_archive_${{ steps.vars.outputs.full_version }}_${{ matrix.architecture }}.zip
  
  linux:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        architecture: [ x64 ]
  
    defaults:
      run:
        shell: bash
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.architecture }}
          cache: 'pip' # Cache all pip dependencies
      - name: Cache PyJ3DUltra build
        uses: actions/cache@v3
        with:
          path: PyJ3DUltra/build
          key: ${{ runner.os }}-${{ matrix.architecture }}
      - name: Build PyJ3DUltra
        run: |
          cmake PyJ3DUltra -BPyJ3DUltra/build
          make -C PyJ3DUltra/build
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install PyInstaller
      - name: Install any missing Qt dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y qtbase5-dev
          sudo apt-get install -y libxcb-cursor0
      - name: Set variables
        id: vars
        run: |
          USER_INPUT_VERSION=${{ github.event.inputs.version }}
          TXT_VERSION=$(cat version.txt)
          GIT_SHA_SHORT=$(git rev-parse --short=7 ${{ github.sha }})
          echo "full_version=${USER_INPUT_VERSION:-$TXT_VERSION-$GIT_SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "lowercase_os=${${{ runner.os }},,}" >> $GITHUB_OUTPUT
      - name: Set version
        id: version
        run: |
          echo ${{ steps.vars.outputs.full_version }} > version.txt
      - name: Build Python App
        run: python -m PyInstaller --log-level=WARN gcft.spec
      - name: Bundle Python App
        run: python build.py
      - name: Upload Python App
        uses: actions/upload-artifact@v3
        with:
          name: gcft-${{ steps.vars.outputs.full_version }}-${{ steps.vars.outputs.lowercase_os }}-${{ matrix.architecture }}
          path: dist/release_archive_${{ steps.vars.outputs.full_version }}_${{ matrix.architecture }}/*
